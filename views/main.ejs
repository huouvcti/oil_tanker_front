<!DOCTYPE html>
<html>
  <head>
    <title>main</title>
    <link rel='stylesheet' href='../public/stylesheets/index.css' />
    <link rel='stylesheet' href='../public/stylesheets/main.css' />

    <link rel="stylesheet" href="../public/stylesheets/lib/header.css" />




    <!-- 지도 -->
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ol@v7.3.0/dist/ol.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@v7.3.0/ol.css">
    <script src="<c:url value='https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js'/>" type="text/javascript"></script>
    



    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


    <script type="text/javascript">

        const GROUP_COLOR = ['red', 'green', 'blue', 'purple', 'orange', 'indigo'];


        var map;

        
        var markerSource = new ol.source.Vector();
        var markerLayer = new ol.layer.Vector({
            source: markerSource, //마커 feacture들
        });

        var lineSource = new ol.source.Vector();
        var lineLayer = new ol.layer.Vector({
            source: lineSource,
        });


        let center = [126.08024, 35.5745];
        let zoom = 7.8, minZoom = 7.8, maxZoom = 20;
            
        function map_init(){		
            map = new ol.Map({
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.TileImage({
                            tileUrlFunction: function (tileCoord) {
                                return "https://navada.kr/katecMapTileImg/google/" + (tileCoord[0] - 6) + "/" + tileCoord[2] + "/" + tileCoord[1] + ".png";
                            }
                        }),
                        
                    }),
                    markerLayer,
                    lineLayer
                ],
                target: 'map',
                view: new ol.View({
                    center : ol.proj.transform(center, 'EPSG:4326', 'EPSG:900913'),
                    zoom: zoom,
                    extent: [13136084.488096794, 3786707.6544116065, 14934291.743690653, 4697752.502265213],
                    minZoom: minZoom,
                    maxZoom: maxZoom,
                })
            });
        }	
    </script>


    <script>

        let markerList, new_markerList;
        let lineData, new_lineData;


        const load_currnet_location = async () => {

            const addMerker = async (markerList) => {
                const markerIcon = await markerList.map((markerData) => {
                    const { latitude, longitude } = markerData;
                    console.log(latitude, longitude)
    
                    const marker = new ol.Feature({
                        geometry: new ol.geom.Point(ol.proj.fromLonLat([longitude, latitude]))
                    });
            
                    // 커스텀 마커 스타일 설정
                    const iconStyle = new ol.style.Style({
                        image: new ol.style.Icon({
                            src: 'https://cdn-icons-png.flaticon.com/512/62/62913.png?w=360', // 커스텀 마커 이미지 경로
                            color: 'red',
                            anchor: [0.5, 0.5], // 마커 이미지의 앵커 포인트 설정
                            scale: 0.06
                        })
                    });
                    marker.setStyle(iconStyle);
            
                    return marker;
                });

                markerSource.clear();
                markerSource.addFeatures(markerIcon);
            }

            const add_shipInfo= async (markerList) => {

                var shipInfo_more_close = () => {
                    let ship_more_close_radio = document.getElementsByClassName('ship_more_close')[0];
                    ship_more_close_radio.checked = true;
                }

                const shipInfoList_wrap = document.getElementsByClassName('shipInfoList_wrap')[0];

                shipInfoList_wrap.innerHTML = `<input type="radio" name='ship_more_visible' class='ship_more_close'/>`;
                markerList.map((value, i) => {
                    shipInfoList_wrap.innerHTML += `<div class='shipInfoList'>
                                                        <input type="checkbox" class='ship_visible'/>
                                                        <div class='shipInfo_text'>
                                                            <p>호서 거북선</p>
                                                            <p style='color: ${GROUP_COLOR[i]}'>ID: ${value['router_id']}</p>
                                                        </div>
                                                        ${
                                                            (value['rsrp']) >= -80
                                                            ? `<img src="/public/images/rsrp/rsrp_green.png" class="rsrp_img" alt="" >`
                                                            : (value['rsrp']) >= -90
                                                                ? `<img src="/public/images/rsrp/rsrp_yellow.png" class="rsrp_img" alt="" >`
                                                                : (value['rsrp']) >= -100
                                                                    ? `<img src="/public/images/rsrp/rsrp_orange.png" class="rsrp_img" alt="" >`
                                                                    : `<img src="/public/images/rsrp/rsrp_red.png" class="rsrp_img" alt="" >`
                                                        
                                                        }

                                                        <input type="radio" name='ship_more_visible' class='ship_more_visible'/>
                                                        
                                                        <div class='ship_more'>
                                                            <span class='ship_more_close_btn' onClick="javascript:shipInfo_more_close()">X</span>

                                                            <p>${value['router_id']}</p>
                                                            <img class="ship_more_img" src="https://i.namu.wiki/i/7jeVH_6qCK1ARphL-QXYaKMHRtJFVGN6wioSM6osgORavCV42-iwKWp_4hmvfxy9VToDHRk13315si8KsWZPpg.webp" alt="" />
                                                            <ul>
                                                                <li>선박 정보</li>
                                                                <li>현재 위치: ${value['latitude']}, ${value['longitude']}</li>
                                                                
                                                            </ul>

                                                            <button onClick={cctv_open}>CCTV</button>
                                                        </div>
                                                    </div>
                                                    `
                })
                    
            }

            const fetchData = async () => {
                try {
                    const response = await axios.get(
                        "https://ocean-gps.com:8000/gpsAPI/gps_current"
                    );

                    console.log(response.data)

                    new_markerList = response.data

                    if(JSON.stringify(new_markerList) !== JSON.stringify(markerList)){
                        markerList = new_markerList;
                        addMerker(markerList)
                        add_shipInfo(markerList)
                    }
                    

                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            };


            fetchData()
        }


        const load_route = async () => {
            const addLine = async (lines) => {
                const newLines = lines.map((line, i) => {
                    const line_view = new ol.Feature({
                        geometry: new ol.geom.LineString(line)
                    });

                    const lineStyle = new ol.style.Style({
                        stroke: new ol.style.Stroke({
                            // color: '#f00',
                            // color: '#'+Math.round(Math.random() * 0xffffff).toString(16),
                            color: GROUP_COLOR[i],
                            width: 2,
                            
                        }),
                    });

                    line_view.setStyle(lineStyle);

                    return line_view;
                });

                lineSource.clear();
                lineSource.addFeatures(newLines);
            }

            const fetchData = async () => {
                try {
                    const response = await axios.get(
                        "https://ocean-gps.com:8000/gpsAPI/gps_route"
                    );

                    console.log(response.data)

                    const new_lineData = response.data;


                    if(JSON.stringify(lineData) !== JSON.stringify(new_lineData)){
                        lineData = new_lineData;
                        
                        lines = [];
                        lineData.forEach( async (item, index, arr) => {
                            let linePath = [];

                            for(let i=0; i<item['latitude'].length; i++){

                                console.log("=======================================")
                                console.log([item['longitude'][i], item['latitude'][i]])

                                let trnasPath = ol.proj.fromLonLat([item['longitude'][i], item['latitude'][i]])
                                let [long, lat] = trnasPath

                                if(!isNaN(long) && !isNaN(lat)){
                                    linePath.push(ol.proj.fromLonLat([item['longitude'][i], item['latitude'][i]]));  
                                }
                            }

                            lines.push(linePath)

                            console.log(lines)
                            addLine(lines)
                        })


                    }





                    
                    

                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            };

            fetchData()
        }

        setInterval(load_currnet_location, 1000);
        setInterval(load_route, 1000);
    </script>

</head>
  <body onload="map_init()">


    <div class='mainLayout'>
        <%- include('./lib/header.ejs') %>
  
        <div class='mainLayout2'>

  
          <div class='main'>
  
            <div class='contents'>
              <div class='mapWrap'>
                <div id="map"></div>
              </div>
  
              <div class='shipInfo_wrap'>
                <div class='currentTime_wrap'>
                </div>
  
                <hr />

                
  
                <div class='searchOption_wrap'>
                  <div class='searchOption'>
                    <label htmlFor="">전체 배 조회</label>
                    <input role="switch" type="checkbox" class='toggle' />
                  </div>
  
                  <div class='searchOption'>
                    <label htmlFor="">기간</label>
                    <div>
                      <input type="date" name="" id="" class='inputDate' />&nbsp;~&nbsp;
                      <input type="date" name="" id="" class='inputDate' />
                    </div>
                  </div>
                </div>
  
                <hr />
  
                <div style="padding:20px 30px 0px 30px; font-weight: bold">선박 리스트</div>

                <div class='shipInfoList_wrap'></div>


              </div>
  
              <button class='mapResetBtn'>위치 초기화</button>
              <button class='zoomInBtn'>+</button>
              <button class='zoomOutBtn'>-</button>
  
  
              <div class='cctvWrap cctvWrap_ '>
                <button>나가기</button>
  
                <div class="cctv_view_wrap">
                  <div id="cctv1">
                    <div class="blanck"></div>
                    <div class="cctv_div">
                      <p>CCTV 1</p>
                      <canvas class="cctv_view"></canvas>
                    </div>
                  </div>
  
                  <div id="cctv2">
                    <div class="blanck"></div>
                    <div class="cctv_div">
                      <p>CCTV 2</p>
                      <canvas class="cctv_view"></canvas>
                    </div>
  
                  </div>
                  <div id="cctv3">
                    <div class="cctv_div">
                      <p>CCTV 3</p>
                      <canvas class="cctv_view"></canvas>
                    </div>
  
                  </div>
  
  
                </div>
              </div>
  
  
  
  
          </div>
  
          
          
        </div>
  
  
  
  
  
  
  
      </div>
  </body>
</html>
