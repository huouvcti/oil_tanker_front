<!DOCTYPE html>
<html>
  <head>
    <title>main</title>
    <link rel='stylesheet' href='../public/stylesheets/index.css' />
    <link rel='stylesheet' href='../public/stylesheets/main.css' />

    <link rel="stylesheet" href="../public/stylesheets/lib/header.css" />




    <!-- 지도 -->
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ol@v7.3.0/dist/ol.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@v7.3.0/ol.css">
    <script src="<c:url value='https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js'/>" type="text/javascript"></script>
    



    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    

    <script>
        window.onload = function() {
            const allCookies = document.cookie;
            
            if(allCookies == '') {
                window.location.href = "/login";
            }
        }
    </script>


    <!-- 지도 setting -->
    <script type="text/javascript">
        const GROUP_COLOR = ['red', 'green', 'blue', 'purple', 'orange', 'indigo'];

        var map;

        var markerSource = new ol.source.Vector();
        var markerLayer = new ol.layer.Vector({
            source: markerSource, //마커 feacture들
        });

        var lineSource = new ol.source.Vector();
        var lineLayer = new ol.layer.Vector({
            source: lineSource,
        });


        let center = [126.08024, 35.5745];
        let zoom = 7.8, minZoom = 7.8, maxZoom = 20;
            
        function map_init(){		
            map = new ol.Map({
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.TileImage({
                            tileUrlFunction: function (tileCoord) {
                                return "https://navada.kr/katecMapTileImg/google/" + (tileCoord[0] - 6) + "/" + tileCoord[2] + "/" + tileCoord[1] + ".png";
                            }
                        }),
                        
                    }),
                    lineLayer,
                    markerLayer,
                ],
                target: 'map',
                view: new ol.View({
                    center : ol.proj.transform(center, 'EPSG:4326', 'EPSG:900913'),
                    zoom: zoom,
                    extent: [13136084.488096794, 3786707.6544116065, 14934291.743690653, 4697752.502265213],
                    minZoom: minZoom,
                    maxZoom: maxZoom,
                })
            });
        }	
    </script>



    <script>
        const map_zoomIn = () => {
            const view = map.getView();
            const currentZoom = view.getZoom();
            view.setZoom(currentZoom + 1);

            if(currentZoom <= maxZoom){
                view.setZoom(currentZoom + 1);
            }
        }

        const map_zoomOut = () => {
            const view = map.getView();
            const currentZoom = view.getZoom();

            if(currentZoom >= minZoom){
                view.setZoom(currentZoom - 1);
            }
            
        }

        const map_zoom_clear = () => {
            const view = map.getView();
            view.setZoom(7.8);
        }
    </script>



    <!-- 마커 라인 그리기 -->
    <script>
        let markerList, new_markerList;
        let lineData, new_lineData;


        const cctv_open = () => {
            document.getElementsByClassName('cctvWrap')[0].className = "cctvWrap";
        }

        const cctv_close = () => {
            document.getElementsByClassName('cctvWrap')[0].className = "cctvWrap cctvWrap_";
        }

        const shipInfo_more_close = () => {
            let ship_more_close_radio = document.getElementsByClassName('ship_more_close')[0];
            ship_more_close_radio.checked = true;
        }


        const load_currnet_location = async () => {

        
            var defaultStyle = new ol.style.Style({
                image: new ol.style.Icon({
                    src: 'https://littledeep.com/wp-content/uploads/2020/03/littledeep_illustration_ship_style1.png', // 커스텀 마커 이미지 경로
                    // color: 'red',
                    anchor: [0.5, 0.5], // 마커 이미지의 앵커 포인트 설정
                    scale: 0.05
                })
            });


            const addMerker = async (markerList) => {
                const markerIcon = await markerList.map((markerData, i) => {
                    const { latitude, longitude } = markerData;
                    console.log(latitude, longitude)
    
                    const marker = new ol.Feature({
                        geometry: new ol.geom.Point(ol.proj.fromLonLat([longitude, latitude])),
                        markerIndex: i
                    });
            
                    // 커스텀 마커 스타일 설정
                    // const iconStyle = new ol.style.Style({
                    //     image: new ol.style.Icon({
                    //         src: 'https://cdn-icons-png.flaticon.com/512/62/62913.png?w=360', // 커스텀 마커 이미지 경로
                    //         color: 'red',
                    //         anchor: [0.5, 0.5], // 마커 이미지의 앵커 포인트 설정
                    //         scale: 0.06
                    //     })

                    //     // image: new ol.style.Circle({
                    //     //     radius: 8,
                    //     //     fill: new ol.style.Fill({ color: GROUP_COLOR[i] }),
                    //     //     stroke: new ol.style.Stroke({ color: 'white', width: 2 })
                    //     // })
                    // });

                    const iconStyle = defaultStyle;
                    marker.setStyle(iconStyle);
            
                    return marker;
                });

                markerSource.clear();
                markerSource.addFeatures(markerIcon);


                

                var selectInteraction = new ol.interaction.Select({
                    layers: [markerLayer], // 클릭 가능한 레이어 설정
                    style: defaultStyle
                });

                // 지도에 Select 인터렉션을 추가합니다.
                map.addInteraction(selectInteraction);

                // 마커 클릭 이벤트 리스너 추가
                selectInteraction.on('select', function (event) {
                    if (event.selected.length > 0) {
                        var selectedFeature = event.selected[0];
                        var markerIndex = selectedFeature.get('markerIndex'); // markerIndex

                        console.log(selectedFeature)

                        // alert('이 마커는 배열의 ' + (markerIndex) + '번째 마커입니다.');

                        document.getElementsByName("ship_more_visible")[markerIndex+1].checked = true;
                        
                        var coordinate = selectedFeature.getGeometry().getCoordinates();
                        map.getView().animate({ center: coordinate, zoom: 10 });
                    }
                });


            }

            const add_shipInfo= async (markerList) => {

                const shipInfoList_wrap = document.getElementsByClassName('shipInfoList_wrap')[0];

                shipInfoList_wrap.innerHTML = `<input type="radio" name='ship_more_visible' class='ship_more_close'/>`;
                markerList.map((value, i) => {
                    shipInfoList_wrap.innerHTML += `<div class='shipInfoList'>
                                                        <input type="checkbox" class='ship_visible'/>
                                                        <div class='shipInfo_text'>
                                                            <p>호서 거북선</p>
                                                            <p style='color: ${GROUP_COLOR[i]}'>ID: ${value['router_id']}</p>
                                                        </div>
                                                        ${
                                                            (value['rsrp']) >= -80
                                                            ? `<img src="/public/images/rsrp/rsrp_green.png" class="rsrp_img" alt="" >`
                                                            : (value['rsrp']) >= -90
                                                                ? `<img src="/public/images/rsrp/rsrp_yellow.png" class="rsrp_img" alt="" >`
                                                                : (value['rsrp']) >= -100
                                                                    ? `<img src="/public/images/rsrp/rsrp_orange.png" class="rsrp_img" alt="" >`
                                                                    : `<img src="/public/images/rsrp/rsrp_red.png" class="rsrp_img" alt="" >`
                                                        
                                                        }

                                                        <input type="radio" name='ship_more_visible' class='ship_more_visible'/>
                                                        
                                                        <div class='ship_more'>
                                                            <span class='ship_more_close_btn' onClick="shipInfo_more_close()">X</span>

                                                            <p>${value['router_id']}</p>
                                                            <img class="ship_more_img" src="https://i.namu.wiki/i/7jeVH_6qCK1ARphL-QXYaKMHRtJFVGN6wioSM6osgORavCV42-iwKWp_4hmvfxy9VToDHRk13315si8KsWZPpg.webp" alt="" />
                                                            <ul>
                                                                <li>선박 정보</li>
                                                                <li>현재 위치: ${value['latitude']}, ${value['longitude']}</li>
                                                                
                                                            </ul>

                                                            <button onClick="cctv_open()">CCTV</button>
                                                        </div>
                                                    </div>
                                                    `
                })
                    
            }

            const fetchData = async () => {
                try {
                    const response = await axios.get(
                        "https://ocean-gps.com:8000/gpsAPI/gps_current"
                    );

                    new_markerList = response.data

                    if(JSON.stringify(new_markerList) !== JSON.stringify(markerList)){
                        markerList = new_markerList;
                        addMerker(markerList)
                        add_shipInfo(markerList)
                    }
                    

                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            };


            fetchData()
        }


        const load_route = async () => {
            const addLine = async (lines) => {
                const newLines = lines.map((line, i) => {
                    const line_view = new ol.Feature({
                        geometry: new ol.geom.LineString(line)
                    });

                    const lineStyle = new ol.style.Style({
                        stroke: new ol.style.Stroke({
                            // color: '#f00',
                            // color: '#'+Math.round(Math.random() * 0xffffff).toString(16),
                            color: GROUP_COLOR[i],
                            width: 2,
                            
                        }),
                    });

                    line_view.setStyle(lineStyle);

                    return line_view;
                });

                lineSource.clear();
                lineSource.addFeatures(newLines);
            }

            const fetchData = async () => {
                try {
                    const response = await axios.get(
                        "https://ocean-gps.com:8000/gpsAPI/gps_route"
                    );

                    const new_lineData = response.data;


                    if(JSON.stringify(lineData) !== JSON.stringify(new_lineData)){
                        lineData = new_lineData;
                        
                        lines = [];
                        lineData.forEach( async (item, index, arr) => {
                            let linePath = [];

                            for(let i=0; i<item['latitude'].length; i++){

                                let trnasPath = ol.proj.fromLonLat([item['longitude'][i], item['latitude'][i]])
                                let [long, lat] = trnasPath

                                if(!isNaN(long) && !isNaN(lat)){
                                    linePath.push(ol.proj.fromLonLat([item['longitude'][i], item['latitude'][i]]));  
                                }
                            }

                            lines.push(linePath)
                            addLine(lines)
                        })


                    }

                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            };

            fetchData()
        }

        setInterval(load_currnet_location, 1000);
        setInterval(load_route, 1000);
    </script>



    <script>
    

    </script>




    <!-- 현재시간 -->
    <script>
        const currentTime = () => {
            const newDate = new Date();

            let now = newDate;  // 현재 날짜 및 시간
            let todayYear = now.getFullYear();
            let todayMonth = now.getMonth() + 1;
            let todayDate = now.getDate();
            const week = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
            let dayOfWeek = week[now.getDay()];
            let hours = now.getHours();
            let minutes = now.getMinutes();
            let seconds = now.getSeconds();

            let dateFormat = todayYear + '.' + todayMonth + '.' + todayDate + ' ' + dayOfWeek + ' ' + hours + ' : ' + minutes + ' : ' + seconds;

            document.getElementById("currentTime").innerText = dateFormat;
        }

        setInterval(currentTime, 100);
    </script>

</head>
  <body onload="map_init()">


    <div class='mainLayout'>
        <%- include('./lib/header.ejs') %>
  
        <div class='mainLayout2'>

  
          <div class='main'>
  
            <div class='contents'>
              <div class='mapWrap'>
                <div id="map"></div>
              </div>
  
              <div class='shipInfo_wrap'>
                <div class='currentTime_wrap'>
                    <div id='currentTime'>
                        
                    </div>
                </div>
  
                <hr />

                
  
                <div class='searchOption_wrap'>
                  <div class='searchOption'>
                    <label htmlFor="">전체 배 조회</label>
                    <input role="switch" type="checkbox" class='toggle' />
                  </div>
  
                  <div class='searchOption'>
                    <label htmlFor="">기간</label>
                    <div>
                      <input type="date" name="" id="" class='inputDate' />&nbsp;~&nbsp;
                      <input type="date" name="" id="" class='inputDate' />
                    </div>
                  </div>
                </div>
  
                <hr />
  
                <div style="padding:20px 30px 0px 30px; font-weight: bold">선박 리스트</div>

                <div class='shipInfoList_wrap'></div>


              </div>
  
              <button class='mapResetBtn' onclick="map_zoom_clear()">위치 초기화</button>
              <button class='zoomInBtn' onclick="map_zoomIn()">+</button>
              <button class='zoomOutBtn' onclick="map_zoomOut()">-</button>
  
  
              <div class='cctvWrap cctvWrap_ '>
                <button onclick="cctv_close()">나가기</button>
  
                <div class="cctv_view_wrap">
                  <div id="cctv1">
                    <div class="blanck"></div>
                    <div class="cctv_div">
                      <p>CCTV 1</p>
                      <canvas class="cctv_view"></canvas>
                    </div>
                  </div>
  
                  <div id="cctv2">
                    <div class="blanck"></div>
                    <div class="cctv_div">
                      <p>CCTV 2</p>
                      <canvas class="cctv_view"></canvas>
                    </div>
  
                  </div>
                  <div id="cctv3">
                    <div class="cctv_div">
                      <p>CCTV 3</p>
                      <canvas class="cctv_view"></canvas>
                    </div>
  
                  </div>
  
  
                </div>
              </div>
  
  
  
  
          </div>
  
          
          
        </div>
  
  
  
  
  
  
  
      </div>
  </body>
</html>
